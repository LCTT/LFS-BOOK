<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="pre-architecture">
  <?dbhtml filename="architecture.html"?>

  <title>LFS 的目标架构</title>

<para>LFS 当前主要支持 AMD/Intel 的 x86（32 位）和 x86_64（64 位）构架的 CPU。另外，本文档也涉及一些更改以允许 LFS 顺利地在 Power PC 和 ARM CPU 上运行。为了顺利构建 LFS，除了后面几页的内容外，你主要需要一个可以在当前 CPU 上正常运行的 Linux 系统，例如：早先版本的 LFS、Ubuntu、Red Hat/Fedora、SuSE 或者是在你的架构上可以运行的其它发行版。另外注意 32 位的发行版是可以在 64 位的 AMD/Intel 处理器上作为宿主机正常安装和运作的。</para>

<para>这里也说明一下关于 64 位系统的一些情况。与 32 位相比，大体上程序运行的速度虽稍微地快了那么一点点，但体积也稍微的大了那么一点点。以在 Core 2 Duo 处理器上运行的 LFS-6.5 系统为例，以下便是实测数据：</para>

<screen><computeroutput>Architecture    Build Time      Build Size
32-bit          198.5 minutes   648 MB
64-bit          190.6 minutes   709 MB</computeroutput></screen>

<para>正如你看到的，64 位程序仅仅比 32 位程序快了 4%，而体积大了 9%。由此可见，单纯的追逐 64 位系统其实并没有太大的必要。但是，假如你的电脑的内存超过了 4 GB 又或者说需要操作大于 4 GB 的数据，64 位系统的优势就比较明显了。</para>

<note><para>上述讨论只适用于对比相同硬件下的构建过程。现代的 64 位系统会比老的 64 位系统更快。LFS 作者建议，如果有机会，尽量在 64 位系统上进行构建。</para></note>

<para>假如按照本文的默认方式构建，那么你将得到一个「纯」64 位系统——这意味着你仅能够执行 64 位的程序。构建「multi-lib」并不是不可以，但是这意味着很多的程序都需要编译两次：一次为 32 位程序编译，一次为 64 位程序编译。不过，本文档并不涉及这部份的内容，因为这些内容会干扰用户学习如何构建一份最基本的 Linux 系统。你可以通过阅读 <ulink url="http://trac.clfs.org/">Cross Linux From Scratch</ulink> 的相关内容获得有关该话题的更多帮助。</para>

<!-- This does not appear to be valid for LFS/BLFS any more
<para>关于 64 位系统，还有一点需要说明。有一些异常老旧的包无法在「纯」64 位系统上构建，或者是需要专门的编译指令。通常出现这样的问题是因为这些包包含有一些与 32 位系统紧密相关的汇编指令。这些包括一些 Xorg 的视频卡驱动（<ulink url="http://xorg.freedesktop.org/releases/individual/driver/">
http://xorg.freedesktop.org/releases/individual/driver/</ulink>），大多数类似的情况都有解决方案，但可能需要特别的方法或者是补丁。</para>
-->

</sect1>
