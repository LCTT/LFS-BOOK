<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-scripts-systemd-custom" revision="systemd">
  <?dbhtml filename="systemd-custom.html"?>

  <title>Systemd 的用法与配置</title>

  <indexterm zone="ch-scripts-systemd-custom">
    <primary sortas="e-Systemd">Systemd 配置</primary>
  </indexterm>

  <sect2>
    <title>基础配置</title>

    <para><filename>/etc/systemd/system.conf</filename> 文件包含了大量的 systemd 控制命令。
    假如未作任何的更改，文件中的所有行应该都是注释掉的，这代表了 systemd 正使用默认的运行方式。
    这个文件中可以设置日志级别，可以修改日志的基本设置。所有设置项都可以在 man 手册的 <filename>systemd-system.conf(5)</filename> 中查看。</para>

  </sect2>

  <sect2>
    <title>禁用启动时清屏</title>

    <para>默认情况下，systemd 将会在系统启动快要结束的时候清屏。如不需要，使用以下操作禁用：</para>

<screen role="nodump"><userinput>mkdir -pv /etc/systemd/system/getty@tty1.service.d

cat &gt; /etc/systemd/system/getty@tty1.service.d/noclear.conf &lt;&lt; EOF
<literal>[Service]
TTYVTDisallocate=no</literal>
EOF</userinput></screen>

    <para>拥有 root 权限的账户总是可以通过 <userinput>journalctl -b</userinput> 查看启动信息。</para>

  </sect2>

  <sect2>
    <title>禁止 /tmp 使用 tmpfs</title>

    <para>默认情况下，<filename class="directory">/tmp</filename> 使用 tmpfs 文件系统。如不需要，使用以下操作禁用：</para>

<screen role="nodump"><userinput>ln -sfv /dev/null /etc/systemd/system/tmp.mount</userinput></screen>

    <para>如果已经为 <filename class="directory">/tmp</filename> 在 <filename>/etc/fstab</filename> 中指定了专门的分区，
    那么此操作是多余的。</para>

  </sect2>

  <sect2>
    <title>配置自动创建和删除文件</title>

    <para>有这样几个服务可以建立或删除文件/目录：</para>

    <itemizedlist>
      <listitem><para>systemd-tmpfiles-clean.service</para></listitem>
      <listitem><para>systemd-tmpfiles-setup-dev.service</para></listitem>
      <listitem><para>systemd-tmpfiles-setup.service</para></listitem>
    </itemizedlist>

    <para>系统配置文件在 <filename>/usr/lib/tmpfiles.d/*.conf</filename> 中。
      本地配置文件在 <filename class="directory">/etc/tmpfiles.d</filename> 中。
      <filename class="directory">/etc/tmpfiles.d</filename>中的文件会覆盖 <filename class="directory">/usr/lib/tmpfiles.d</filename> 中相同名称的文件。
      （译者注：首先读取系统范围配置文件，再读取用户范围配置文件，用户范围配置文件会覆盖系统范围配置文件的相同部分。）可以在 man 手册的 <filename>tmpfiles.d(5)</filename> 中获取文件格式详情。</para>

  </sect2>

  <sect2>
    <title>覆盖默认服务的行为</title>

    <para>The parameter of a unit can be overriden by creating a directory
    and a configuration file in <filename
    class="directory">/etc/systemd/system</filename>. For example:</para>

<screen role="nodump"><userinput>mkdir -pv /etc/systemd/system/foobar.service.d

cat > /etc/systemd/system/foobar.service.d/foobar.conf &lt;&lt; EOF
<literal>[Service]
Restart=always
RestartSec=30</literal>
EOF</userinput></screen>

     <para>可以在 man 手册的 <filename>systemd.unit(5)</filename> 中查询更多信息。创建好文件之后，请运行 <userinput>systemctl daemon-reload</userinput> 和 <userinput>systemctl restart foobar</userinput> 激活所做更改。</para>

  </sect2>

  <sect2>
    <title>Debugging the Boot Sequence</title>

    <para>Rather than plain shell scripts used in SysVinit or BSD style init
    systems, systemd uses a unified format for different types of startup
    files (or units). The command <command>systemctl</command> is used to
    enable, disable, controll state, and obtain status of unit files. Here 
    are some examples of frequently used commands:</para>

    <itemizedlist>
       <listitem>
         <para><command>systemctl list-units -t <replaceable>&lt;service&gt;</replaceable> [--all]</command>:
         lists loaded unit files of type service.</para>
       </listitem>
       <listitem>
         <para><command>systemctl list-units -t <replaceable>&lt;target&gt;</replaceable> [--all]</command>:
         lists loaded unit files of type target.</para>
       </listitem>
       <listitem>
         <para><command>systemctl show -p Wants <replaceable>&lt;multi-user.target&gt;</replaceable></command>:
         shows all units that depend on the multi-user target. Targets are
         special unit files that are anogalous to runlevels under
         SysVinit.</para>
       </listitem>
       <listitem>
         <para><command>systemctl status <replaceable>&lt;servicename.service&gt;</replaceable></command>:
         shows the status of the servicename service. The .service extension
         can be omitted if there are no other unit files with the same name,
         such as .socket files (which create a listening socket that provides
         similar functionality to inetd/xinetd).</para>
       </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>Working with the Systemd Journal</title>

    <para>Logging on a system booted with systemd is handled with
    systemd-journald (by default), rather than a typical unix syslog daemon.
    You can also add a normal syslog daemon and have both work side by
    side if desired. The systemd-journald program stores journal entries in a
    binary format rather than a plain text log file. To assist with
    parsing the file, the command <command>journalctl</command> is provided.
    Here are some examples of frequently used commands:</para>

    <itemizedlist>
       <listitem>
         <para><command>journalctl -r</command>: shows all contents of the
         journal in reverse chronological order.</para>
       </listitem>
       <listitem>
         <para><command>journalctl -u <replaceable>UNIT</replaceable></command>:
         shows the journal entries associated with the specified UNIT
         file.</para>
       </listitem>
       <listitem>
         <para><command>journalctl -b[=ID] -r</command>: shows the journal
         entries since last successfull boot (or for boot ID) in reverse
         chronological order.</para>
       </listitem>
       <listitem>
         <para><command>journalctl -f</command>: povides functionality similar
         to tail -f (follow).</para>
       </listitem>
    </itemizedlist>

  </sect2>

  <sect2>
    <title>Long Running Processes</title>

    <para>Beginning with systemd-230, all user processes are killed when a
    user session is ended, even if nohup is used, or the process uses
    <function>daemon()</function> or <function>setsid()</function>. This is a
    deliberate change from a historically permissive environment to a more
    restrictive one. The new behavior may cause issues if you depend on long
    running programs (e.g., <command>screen</command> or
    <command>tmux</command>) to remain active after ending your user
    session. There are three ways to enable lingering processes to remain after
    a user session is ended.</para>

    <itemizedlist>
      <listitem>
        <para>
          <emphasis>Enable process lingering for only needed users</emphasis>:
          normal users have permission to enable process lingering
          with the command <command>loginctl enable-linger</command> for their
          own user. System administrators can use the same command with a
          <parameter>user</parameter> argument to enable for a user. That user
          can then use the <command>systemd-run</command> command to start
          long running processes. For example: <command>systemd-run --scope
          --user /usr/bin/screen</command>. If you enable lingering for your
          user, the user@.service will remain even after all login sessions are
          closed, and will automatically start at system boot. This has the
          advantage of explicitly allowing and disallowing processes to run
          after the user session has ended, but breaks backwards compatibility
          with tools like <command>nohup</command> and utilities that use
          <function>deamon()</function>.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Enable system-wide process lingering</emphasis>:
          you can set <parameter>KillUserProcesses=no</parameter> in
          <filename>/etc/logind.conf</filename> to enable process lingering
          globally for all users. This has the benefit of leaving the old
          method available to all users at the expense of explicit control.
        </para>
      </listitem>
      <listitem>
        <para>
          <emphasis>Disable at build-time</emphasis>: You can enable
          lingering by default while building systemd by adding the switch
          <parameter>--without-kill-user-processes</parameter> to the
          <command>configure</command> command for systemd. This completely
          disables the ability of systemd to kill user processes at session
          end.
        </para>
      </listitem>
    </itemizedlist>

  </sect2>

</sect1>
