<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="pre-hostreqs" xreflabel="宿主系统要求">
  <?dbhtml filename="hostreqs.html"?>

  <title>宿主系统要求</title>

    <para>你的主机系统应具有以下指定最低版本的软件。 对于大多数现代 Linux 发行版来说，这应该不是问题。 另请注意，不少发行版可能会将软件的头文件单独打包，并采用「&lt;package-name&gt;-devel」或「&lt;package-name&gt;-dev」的形式命名。如果你的发行版提供了这样的软件包，请务必安装。</para>

   <para>所列软件包的早期版本可能也能用，但尚未经过测试。</para>

  <itemizedlist spacing="compact">

    <listitem>
      <para><emphasis role="strong">Bash-3.2</emphasis> （/bin/sh 应该是 bash 的符号链接或硬链接）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Binutils-2.25</emphasis> （不建议使用 &binutils-version; 以后的版本，尚未经过测试）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bison-2.7</emphasis> （/usr/bin/yacc 应该是指向 bison 或执行 bison 的小型脚本的链接）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Bzip2-1.0.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Coreutils-6.9</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Diffutils-2.8.1</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Findutils-4.2.31</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gawk-4.0.1</emphasis> （/usr/bin/awk 应该是 gawk 的链接）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">GCC-6.2</emphasis> 包括 C++ 编译器，<command>g++</command> （&gcc-version; 以后的版本不建议使用，尚未经过测试）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Glibc-2.11</emphasis> （&glibc-version; 以后的版本不建议使用，尚未经过测试）</para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Grep-2.5.1a</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Gzip-1.3.12</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Linux Kernel-&min-kernel;</emphasis></para>

      <para>之所以指定使用这一版本的内核，是因为这是第 6 章构建 <application>glibc</application> 的需求，开发人员如是建议。udev 也有这个需求。</para>

      <para>如果宿主机内核早于 &min-kernel;，则需使用更新版本的内核将其替换。有两种方法可以解决这个问题。首先，查看你的 Linux 供应商是否提供 &min-kernel; 或更高版本内核的软件包。如果提供的话，你便能如愿安装了。如果你的供应商不提供合适的内核（的软件包），或者是你不想直接安装，你也可以自己编译内核。编译内核和配置引导的说明（假设宿主机使用 GRUB）位于 <xref linkend="chapter-bootable"/>。</para>

    </listitem>

    <listitem>
      <para><emphasis role="strong">M4-1.4.10</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Make-4.0</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Patch-2.5.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Perl-5.8.8</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Python-3.4</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Sed-4.1.5</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Tar-1.22</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Texinfo-4.7</emphasis></para>
    </listitem>

    <listitem>
      <para><emphasis role="strong">Xz-5.0.0</emphasis></para>
    </listitem>

  </itemizedlist>

  <important>
    <para>请注意，依据本手册的指导构建 LFS 系统需确保上述提到的符号链接无误。虽然指向其他软件（例如 dash，mawk 等）的符号链接可能也可以，但 LFS 开发团队尚未对其进行测试或支持，并且这样做可能导致对于个别软件包在执行命令或者应用某些补丁的时候出现偏差。</para>
  </important>

  <!-- Use an empty sect2 element to prevent a pdf warning.  -->
  <bridgehead renderas="sect2" 
              id="version-check" 
              xreflabel="宿主系统需求">
  </bridgehead>
  <!--<title> </title>-->

  <para >查看宿主机系统是否已具备所有软件包的适当版本和编译程序的能力，请运行以下命令：</para>

<!-- ANY additional lines in the script cause a pdf rendering problem-->
<screen role="nodump"><userinput>cat &gt; version-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
# Simple script to list version numbers of critical development tools
export LC_ALL=C
bash --version | head -n1 | cut -d" " -f2-4
MYSH=$(readlink -f /bin/sh)
echo "/bin/sh -&gt; $MYSH"
echo $MYSH | grep -q bash || echo "ERROR: /bin/sh does not point to bash"
unset MYSH

echo -n "Binutils: "; ld --version | head -n1 | cut -d" " -f3-
bison --version | head -n1

if [ -h /usr/bin/yacc ]; then
  echo "/usr/bin/yacc -> `readlink -f /usr/bin/yacc`";
elif [ -x /usr/bin/yacc ]; then
  echo yacc is `/usr/bin/yacc --version | head -n1`
else
  echo "yacc not found" 
fi

bzip2 --version 2&gt;&amp;1 &lt; /dev/null | head -n1 | cut -d" " -f1,6-
echo -n "Coreutils: "; chown --version | head -n1 | cut -d")" -f2
diff --version | head -n1
find --version | head -n1
gawk --version | head -n1

if [ -h /usr/bin/awk ]; then
  echo "/usr/bin/awk -&gt; `readlink -f /usr/bin/awk`";
elif [ -x /usr/bin/awk ]; then
  echo awk is `/usr/bin/awk --version | head -n1`
else 
  echo "awk not found" 
fi

gcc --version | head -n1
g++ --version | head -n1
ldd --version | head -n1 | cut -d" " -f2-  # glibc version
grep --version | head -n1
gzip --version | head -n1
cat /proc/version
m4 --version | head -n1
make --version | head -n1
patch --version | head -n1
echo Perl `perl -V:version`
python3 --version
sed --version | head -n1
tar --version | head -n1
makeinfo --version | head -n1  # texinfo version
xz --version | head -n1
<?hard-pagebreak?>
echo 'int main(){}' &gt; dummy.c &amp;&amp; g++ -o dummy dummy.c
if [ -x dummy ]
  then echo "g++ compilation OK";
  else echo "g++ compilation failed"; fi
rm -f dummy.c dummy</literal>
EOF

bash version-check.sh</userinput></screen>
<!--
  <para>同时，还请进行库文件的一致性检查：</para>

<screen role="nodump"><userinput>cat &gt; library-check.sh &lt;&lt; "EOF"
<literal>#!/bin/bash
for lib in lib{gmp,mpfr,mpc}.la; do
  echo $lib: $(if find /usr/lib* -name $lib|
               grep -q $lib;then :;else echo not;fi) found
done
unset lib</literal>
EOF

bash library-check.sh</userinput></screen>

<para>这些文件应该要么都在或者是都缺失，而不应该只有一两个。</para>
-->

</sect1>
