<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-gcc-pass1" role="wrap">
  <?dbhtml filename="gcc-pass1.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version; - 第 1 遍</title>

  <indexterm zone="ch-tools-gcc-pass1">
    <primary sortas="a-GCC">GCC</primary>
    <secondary>tools, pass 1</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/gcc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch5p1-sbu;</seg>
        <seg>&gcc-ch5p1-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装交叉编译的 GCC</title>

    <para>现在 GCC 需要 GMP、 MPFR 和 MPC 软件包。在你的主机发行版中可能并不包括这些软件包，它们将和 GCC 一起编译。解压每个软件包到 GCC 源文件夹并重命名解压后的文件夹，以便 GCC 编译过程中能自动使用这些软件：</para>

    <note><para>有些读者对本章节内容存在误解。和之前章节 (<xref linkend='buildinstr'/>) 中一样，过程都是相同的。首先从源文件夹中解压 gcc tar 包，然后进入到创建的文件夹中。然后才可以执行下面的指令。</para></note>

<screen><userinput remap="pre">tar -xf ../mpfr-&mpfr-version;.tar.xz
mv -v mpfr-&mpfr-version; mpfr
tar -xf ../gmp-&gmp-version;.tar.xz
mv -v gmp-&gmp-version; gmp
tar -xf ../mpc-&mpc-version;.tar.gz
mv -v mpc-&mpc-version; mpc</userinput></screen>

    <para>下面的指令将会修改 GCC 默认的动态链接器为安装在 <filename class="directory">/tools</filename> 文件夹中的。它也会从 GCC 的 include 搜索路径中移除 <filename class="directory">/usr/include</filename>。执行：</para>

<screen><userinput remap="pre">for file in gcc/config/{linux,i386/linux{,64}}.h
do
  cp -uv $file{,.orig}
  sed -e 's@/lib\(64\)\?\(32\)\?/ld@/tools&amp;@g' \
      -e 's@/usr@/tools@g' $file.orig &gt; $file
  echo '
#undef STANDARD_STARTFILE_PREFIX_1
#undef STANDARD_STARTFILE_PREFIX_2
#define STANDARD_STARTFILE_PREFIX_1 "/tools/lib/"
#define STANDARD_STARTFILE_PREFIX_2 ""' &gt;&gt; $file
  touch $file.orig
done</userinput></screen>

    <para>如果上面的看起来难以理解，让我们分开来看一下吧。首先我们找到 <filename class="directory">gcc/config</filename> 文件夹下的所有命名为 <filename>linux.h</filename>，<filename>linux64.h</filename> 或 <filename>sysv4.h</filename> 的文件。对于找到的每个文件，我们把它复制到相同名称的文件，但增加了后缀 <quote>.orig</quote>。然后第一个 sed 表达式在每个 <quote>/lib/ld</quote>，<quote>/lib64/ld</quote> 或者 <quote>/lib32/ld</quote> 实例前面增加 <quote>/tools</quote>，第二个 sed 表达式替换 <quote>/usr</quote> 的硬编码实例。然后，我们添加这改变默认 startfile 前缀到文件末尾的定义语句。注意 <quote>/tools/lib/</quote> 后面的 <quote>/</quote> 是必须的。最后，我们用 <command>touch</command> 更新复制文件的时间戳。当与 <command>cp -u</command> 一起使用时，可以防止命令被无意中运行两次造成对原始文件意外的更改。</para>

    <para>Finally, on x86_64 hosts, set the default directory name for
    64-bit libraries to <quote>lib</quote>:</para>

<screen><userinput remap="pre">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
 ;;
esac</userinput></screen>

<!--
    <para>GCC doesn't detect stack protection correctly, which causes problems
    for the build of Glibc-&glibc-version;, so fix that by issuing the following
    command:</para>

<screen><userinput remap="pre">sed -i '/k prot/agcc_cv_libc_provides_ssp=yes' gcc/configure</userinput></screen>
-->

<!--
    <para>Also fix a problem identified upstream:</para>

<screen><userinput remap="pre">sed -i 's/if \((code.*))\)/if (\1 \&amp;\&amp; \!DEBUG_INSN_P (insn))/' gcc/sched-deps.c</userinput></screen>
-->
    <para>GCC 手册建议在源文件夹之外一个专门的编译文件夹中编译 GCC：</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>准备编译 GCC:</para>

<screen><userinput remap="configure">../configure                                       \
    --target=$LFS_TGT                              \
    --prefix=/tools                                \
    --with-glibc-version=2.11                      \
    --with-sysroot=$LFS                            \
    --with-newlib                                  \
    --without-headers                              \
    --with-local-prefix=/tools                     \
    --with-native-system-header-dir=/tools/include \
    --disable-nls                                  \
    --disable-shared                               \
    --disable-multilib                             \
    --disable-decimal-float                        \
    --disable-threads                              \
    --disable-libatomic                            \
    --disable-libgomp                              \
    --disable-libmpx                               \
    --disable-libquadmath                          \
    --disable-libssp                               \
    --disable-libvtv                               \
    --disable-libstdcxx                            \
    --enable-languages=c,c++</userinput></screen>
    <variablelist>
      <title>配置选项的含义:</title>

      <varlistentry>
        <term><parameter>--with-newlib</parameter></term>
        <listitem>
          <para>由于还没有可用的 C 库，这确保编译 libgcc 时定义了常数 inhibit_libc。这可以防止编译任何需要 libc 支持的代码。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--without-headers</parameter></term>
        <listitem>
          <para>创建一个完成的交叉编译器的时候， GCC 要求标准头文件和目标系统兼容。对于我们的目的来说，不需要这些头文件。这个选项可以防止 GCC 查找它们。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-local-prefix=/tools</parameter></term>
        <listitem>
          <para>GCC 会查找本地已安装的 include 文件的系统位置。默认是 <filename>/usr/local</filename>。把它设置为 <filename>/tools</filename> 能把主机位置中的 <filename>/usr/local</filename> 从 GCC 的搜索路径中排除。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-native-system-header-dir=/tools/include</parameter></term>
        <listitem>
          <para>GCC 默认会在 <filename>/usr/include</filename> 中查找系统头文件。和 sysroot 选项一起使用，会转换为 <filename>$LFS/usr/include</filename>。在后面两个章节中头文件会被安装到 <filename>$LFS/tools/include</filename> 。这个选项确保 gcc 能正确找到它们。第二次编译 GCC 时，同样的选项可以保证不会去寻找主机系统的头文件。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-shared</parameter></term>
        <listitem>
          <para>这个选项强制 GCC 静态链接到它的内部库。我们这样做是为了避免与主机系统可能出现的问题。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-decimal-float, --disable-threads,
        --disable-libatomic, --disable-libgomp, --disable-libmpx,
        --disable-libquadmath, --disable-libssp, --disable-libvtv,
        --disable-libstdcxx</parameter></term>
        <listitem>
          <para>这些选项取消了对十进制浮点数扩展、线程化、libatomic、libgomp、libmpx、libitm、libquadmath、libsanitizer、libssp、libvtv、libcilkrts 和 C++ 标准库的支持。这些功能在编译交叉编译器的时候会导致编译失败，对于交叉编译临时 libc 来说也没有必要。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--disable-multilib</parameter></term>
        <listitem>
          <para>在 x86_64 机器上， LFS 还不支持 multilib 配置。这个选项对 x86 来说无害。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-languages=c,c++</parameter></term>
        <listitem>
          <para>这个选项确保只编译 C 和 C++ 编译器。这些是现在唯一需要的语言。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>运行命令编译 GCC:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>现在编译完成了。在这里，通常会运行测试套件，但正如前面提到的，测试套件框架还没有准备好。在此进行测试的并没有太多好处，因为第一遍编译的程序很快会被取代。</para>

    <para>安装软件包：</para>

<screen><userinput remap="install">make install</userinput></screen>
<!--
    <para>Using <parameter>- -disable-shared</parameter> means that the
    <filename>libgcc_eh.a</filename> file isn't created and installed. The
    Glibc package depends on this library as it uses
    <parameter>-lgcc_eh</parameter> within its build system. This dependency
    can be satisfied by creating a symlink to <filename>libgcc.a</filename>,
    since that file will end up containing the objects normally contained in
    <filename>libgcc_eh.a</filename>:</para>

<screen><userinput remap="install">ln -sv libgcc.a `$LFS_TGT-gcc -print-libgcc-file-name | sed 's/libgcc/&amp;_eh/'`</userinput></screen>
-->
  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-gcc" role="."/></para>

  </sect2>

</sect1>
