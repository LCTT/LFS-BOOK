<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-glibc" role="wrap">
  <?dbhtml filename="glibc.html"?>

  <sect1info condition="script">
    <productname>glibc</productname>
    <productnumber>&glibc-version;</productnumber>
    <address>&glibc-url;</address>
  </sect1info>

  <title>Glibc-&glibc-version;</title>

  <indexterm zone="ch-tools-glibc">
    <primary sortas="a-Glibc">Glibc</primary>
    <secondary>tools</secondary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="../chapter06/glibc.xml"
    xpointer="xpointer(/sect1/sect2[1]/para[1])"/>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&glibc-ch5-sbu;</seg>
        <seg>&glibc-ch5-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Glibc</title>

    <para>Glibc 手册建议在源文件夹之外的一个专用文件夹中编译 Glibc：</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>下一步，准备编译 Glibc：</para>

<screen><userinput remap="configure">../configure                             \
      --prefix=/tools                    \
      --host=$LFS_TGT                    \
      --build=$(../scripts/config.guess) \
      --enable-kernel=&min-kernel;                \
      --with-headers=/tools/include</userinput></screen>
<!--
      libc_cv_forced_unwind=yes          \
      libc_cv_c_cleanup=yes</userinput></screen> -->

    <variablelist>
      <title>配置选项的含义:</title>

      <varlistentry>
        <term><parameter>--host=$LFS_TGT, --build=$(../scripts/config.guess)</parameter></term>
        <listitem>
          <para>这些选项的组合效果是 Glibc 的构建系统配置它自己用 <filename class="directory">/tools</filename> 里面的交叉链接器和交叉编译器交叉编译自己。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--enable-kernel=&min-kernel;</parameter></term>
        <listitem>
          <para>这告诉 Glibc 编译能支持 &min-kernel;  以及之后的内核库。更早的内核版本不受支持。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-headers=/tools/include</parameter></term>
        <listitem>
          <para>告诉 Glibc 利用刚刚安装在 tools 文件夹中的头文件编译自身，此能够根据内核的具体特性提供更好的优化。</para>
        </listitem>
      </varlistentry>
<!--
      <varlistentry>
        <term><parameter>libc_cv_forced_unwind=yes</parameter></term>
        <listitem>
          <para>在 <xref linkend="ch-tools-binutils-pass1"/> 中安装的链接器是交叉编译的，在安装完 Glibc 之前不能使用。由于依赖于工作的链接器，这意味着 force-unwind 支持的配置测试会失败。将 libc_cv_forced_unwind=yes 变量传递进去告诉 <command>configure</command> 命令 force-unwind 支持是可用的，不需要进行测试。</para>
        </listitem>
      </varlistentry>
      <varlistentry>
        <term><parameter>libc_cv_c_cleanup=yes</parameter></term>
        <listitem>
          <para>类似的，我们传递 libc_cv_c_cleanup=yes 到 <command>configure</command> 脚本跳过测试就完成了 C 清理支持的配置。</para>
        </listitem>
      </varlistentry>
-->
<!--  <varlistentry>
        <term><parameter>libc_cv_ctors_header=yes</parameter></term>
        <listitem>
          <para>类似的，我们传递 libc_cv_ctors_header=yes 到 <command>configure</command> 脚本跳过测试就完成了 gcc 构建器支持的配置。</para>
        </listitem>
      </varlistentry>-->

    </variablelist>

    <para>在这个过程中，可能会出现下面的警告：</para>

    <blockquote>
<screen><computeroutput>configure: WARNING:
*** These auxiliary programs are missing or
*** incompatible versions: msgfmt
*** some features will be disabled.
*** Check the INSTALL file for required versions.</computeroutput></screen>
    </blockquote>

    <para><command>msgfmt</command> 程序的缺失或者不兼容通常是无害的。这个 <command>msgfmt</command> 程序是 Gettext 软件包的一部分，主机发行版应该提供了。</para>

    <note><para>有报告说用「parallel make」编译这个软件包的时候会失败。如果出现这种情况，用「-j1」选项重新运行 make 命令。</para></note>

    <para>编译软件包:</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>安装软件包:</para>

<screen><userinput remap="install">make install</userinput></screen>

  <caution>
    <para>到了这里，必须停下来确认新工具链的基本功能(编译和链接)都是像预期的那样正常工作。运行下面的命令进行全面的检查：</para>

<screen><userinput>echo 'int main(){}' &gt; dummy.c
$LFS_TGT-gcc dummy.c
readelf -l a.out | grep ': /tools'</userinput></screen>

    <para>如果一切工作正常的话，这里应该没有错误，最后一个命令的输出形式会是：</para>

<screen><computeroutput>[Requesting program interpreter: /tools/lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

    <para>注意 32 位机器上对应的解释器名字是 <filename>/tools/lib/ld-linux.so.2</filename>。</para>

    <para>如果输出不是像上面那样或者根本就没有输出，那么可能某些地方出错了。调查并回溯这些步骤，找出问题所在并改正它。在继续之前必须解决这个问题。</para>

    <para>一旦一切都顺利，清理测试文件：</para>

<screen><userinput>rm -v dummy.c a.out</userinput></screen>

  </caution>

  <note><para>在后面的编译 Binutils 章节时会再一次检查工具链是否正确编译。如果 Binutils 编译失败，说明之前安装 Binutils、GCC、或者 Glibc 时某些地方出现了错误。</para></note>

  </sect2>

  <sect2 role="content">
    <title/>

    <para>该软件包的详细信息请参见：
    <xref linkend="contents-glibc"/>。</para>

  </sect2>

</sect1>
