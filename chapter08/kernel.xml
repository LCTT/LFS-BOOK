<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-kernel" role="wrap">
  <?dbhtml filename="kernel.html"?>

  <sect1info condition="script">
    <productname>kernel</productname>
    <productnumber>&linux-version;</productnumber>
    <address>&linux-url;</address>
  </sect1info>

  <title>Linux-&linux-version;</title>

  <indexterm zone="ch-bootable-kernel">
    <primary sortas="a-Linux">Linux</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Linux 软件包包含 Linux 内核。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&linux-ch8-sbu;</seg>
        <seg>&linux-ch8-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装内核</title>

    <para>编译内核包括以下步骤——配置、编译和安装。阅读内核源码树中的 <filename>README</filename> 可以获得替代本手册配置的方法。</para>

    <para>运行以下命令准备编译：</para>

<screen><userinput remap="pre">make mrproper</userinput></screen>

    <para>这将保证内核树的绝对干净。内核小组建议在每次编译之前都执行此命令，无用的代码将会在解压后删除。</para>

    <!-- Support for compiling a keymap into the kernel is deliberately removed -->

    <para>通过菜单界面配置内核。配置内核的一般信息请查看：<ulink url="&hints-root;kernel-configuration.txt"/>。
    BLFS 包含有一些内核的特殊配置，可以查看：<ulink url="&blfs-book;longindex.html#kernel-config-index"/>。
    内核配置和编译的附加信息可查看：<ulink url="http://www.kroah.com/lkn/"/>。</para>

    <note>
    
      <para>配置内核的一个好的起点是运行 <command>make defconfig</command>。这样会参考你的机器架构生成一份基本能用的基础配置。</para>

      <para>注意要确保启用/禁用/设置下面这些特性，否则系统也许不能正常工作甚至根本无法启动：</para>

      <screen role="nodump" revision="sysv">
Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]

Kernel hacking  ---&gt;
       Choose kernel unwinder (Frame pointer unwinder)  ---&gt; [CONFIG_UNWINDER_FRAME_POINTER]</screen>

      <screen role="nodump" revision="systemd">
General setup -->
   [ ] Enable deprecated sysfs features to support old userspace tools [CONFIG_SYSFS_DEPRECATED]
   [ ] Enable deprecated sysfs features by default [CONFIG_SYSFS_DEPRECATED_V2]
   [*] open by fhandle syscalls [CONFIG_FHANDLE]
   [ ] Auditing support [CONFIG_AUDIT]
   [*] Control Group support [CONFIG_CGROUPS]
Processor type and features  ---&gt;
   [*] Enable seccomp to safely compute untrusted bytecode [CONFIG_SECCOMP]
Networking support  ---&gt;
  Networking options  ---&gt;
   &lt;*&gt; The IPv6 protocol [CONFIG_IPV6]
Device Drivers  ---&gt;
  Generic Driver Options  ---&gt;
   [ ] Support for uevent helper [CONFIG_UEVENT_HELPER]
   [*] Maintain a devtmpfs filesystem to mount at /dev [CONFIG_DEVTMPFS]
   [ ] Fallback user-helper invocation for firmware loading [CONFIG_FW_LOADER_USER_HELPER]
Firmware Drivers  ---&gt;
   [*] Export DMI identification via sysfs to userspace [CONFIG_DMIID]
File systems  ---&gt;
   [*] Inotify support for userspace [CONFIG_INOTIFY_USER]
   &lt;*&gt; Kernel automounter version 4 support (also supports v3) [CONFIG_AUTOFS4_FS]
  Pseudo filesystems  ---&gt;
   [*] Tmpfs POSIX Access Control Lists [CONFIG_TMPFS_POSIX_ACL]
   [*] Tmpfs extended attributes [CONFIG_TMPFS_XATTR]
Kernel hacking  ---&gt;
       Choose kernel unwinder (Frame pointer unwinder)  ---&gt; [CONFIG_UNWINDER_FRAME_POINTER]</screen>
    </note>

    <note revision="systemd">
      <para>尽管「The IPv6 Protocol」不是必须打开，但是 systemd 开发人员强烈推荐打开。</para>
    </note>

    <para revision="sysv">根据对系统的不同需求，可能需要这些选项。BLFS 软件包需要的选项列表，参考 <ulink
    url="&lfs-root;blfs/view/&short-version;/longindex.html#kernel-config-index">BLFS 的内核设定索引</ulink>(&lfs-root;blfs/view/&short-version;/longindex.html#kernel-config-index).</para>

    <note>
      <para>如果你主机的硬件用的是 UEFI，那么上面的‘make defconfig’应该会自动添加一些 EFI 相关的内核选项。</para>

      <para>为了让你的 LFS 内核，在你的主机是 UEFI 引导环境的情况下，能够被引导，你的内核必须要有这项：</para>

<screen role="nodump">Processor type and features  ---&gt;
   [*]   EFI stub support  [CONFIG_EFI_STUB]</screen>

      <para>文件 lfs-uefi.txt 中包含了管理 UEFI 环境的完整描述，参见 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt"/>。</para>
    </note>

    <variablelist>
      <title>上述配置项的一些原理说明：</title>

      <varlistentry>
        <term><parameter>Support for uevent helper</parameter></term>
        <listitem>
          <para>打开这个选项会影响 udev/Eudev 设备管理。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>Maintain a devtmpfs</parameter></term>
        <listitem>
          <para>这个选项允许内核在 udev 运行之前就创建自动设备节点。之后 udev 在这个基础上运行，管理权限以及增加符号链接。对于所有 udev/Eudev 用户，这个配置项是必须的。</para>
        </listitem>
      </varlistentry>

    </variablelist>

<screen role="nodump"><userinput>make menuconfig</userinput></screen>

    <variablelist>
      <title>可选 make 环境变量的含义：</title>

      <varlistentry>
        <term><parameter>LANG=&lt;host_LANG_value&gt; LC_ALL=</parameter></term>
        <listitem>
          <para>建立与宿主系统相同的地域设定。在 UTF-8 linux 文本命令行上逐行绘制适宜的 menuconfig ncurses 接口时可能需要这项配置。</para>

          <para>要使用的话，请我务必使用宿主系统中的变量 <envar>$LANG</envar> 去代替 <replaceable>&lt;host_LANG_value&gt;</replaceable>。你也可以用宿主系统中的 <envar>$LC_ALL</envar> 或 <envar>$LC_CTYPE</envar> 来代替。</para>
        </listitem>
      </varlistentry>

    </variablelist>

    <para>另外，<command>make oldconfig</command> 在某些情况下可能更合适。查看 <filename>README</filename> 文件了解更多信息。</para>

    <para>想偷懒的话，可以拷贝宿主系统的内核配置文件 <filename>.config</filename>（如果有的话）到解压后的 <filename class="directory">linux-&linux-version;</filename> 目录下来跳过内核配置。不过，我们不建议这样做。最好是探索一下整个内核配置菜单，从最开始配置内核。</para>

    <para>编译内核映像和模块：</para>

<screen><userinput remap="make">make</userinput></screen>

    <para>如果使用内核模块，需要 <filename class="directory">/etc/modprobe.d</filename> 文件里的模块配置。关于模块和内核配置的信息可以查看 <xref linkend="ch-scripts-udev"/> 以及 <filename class="directory">linux-&linux-version;/Documentation</filename> 目录下的内核文档。还有，<filename>modprobe.d(5)</filename> 也可以看一下。</para>

    <para>如果内核配置里用到，需要安装模块：</para>

<screen><userinput remap="install">make modules_install</userinput></screen>

    <para>在内核编译完成后，还需要一个额外步骤来完成安装。有些文件需要拷贝到 <filename class="directory">/boot</filename> 目录下。</para>

    <caution>
     <para>如果宿主系统拥有单独的 /boot 分区，那么文件就应该复制到那里。简单的解决方法就是在执行前将 /boot 绑定到宿主的 /mnt/lfs/boot。以<emphasis>宿主系统</emphasis>中的 root 用户运行：</para>

<screen role="nodump"><userinput>mount --bind /boot /mnt/lfs/boot</userinput></screen>
    </caution>

    <para>内核映像文件所在的实际目录根据主机系统架构可能会不一样。下面的文件名你也可以改成你喜欢的，不过开头最好是 <emphasis>vmlinuz</emphasis> 才可以兼容下一节要讲的配置引导过程的自动设定。下面的命令假设主机是 x86 架构：</para>

<screen revision="sysv"><userinput remap="install">cp -iv arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&version;</userinput></screen>

<screen revision="systemd"><userinput remap="install">cp -iv arch/x86/boot/bzImage /boot/vmlinuz-&linux-version;-lfs-&versiond;</userinput></screen>

    <para><filename>System.map</filename> 是内核的符号文件。它映射了每一个内核 API 函数的入口，以及内核运行时的数据结构地址。是调查内核问题时的资源。运行下面的命令安装映射文件：</para>

<screen><userinput remap="install">cp -iv System.map /boot/System.map-&linux-version;</userinput></screen>

    <para>在之前命令 <command>make menuconfig</command> 里生成的内核配置文件 <filename>.config</filename> 包含了当前编译的内核的所有配置。最好能保存下来留作参考：</para>

<screen><userinput remap="install">cp -iv .config /boot/config-&linux-version;</userinput></screen>

    <para>安装 Linux 内核文档：</para>

<screen><userinput remap="install">install -d /usr/share/doc/linux-&linux-version;
cp -r Documentation/* /usr/share/doc/linux-&linux-version;</userinput></screen>

    <para>需要注意一下内核源代码目录下的文件属主并不是 <emphasis>root</emphasis>。在以 <emphasis>root</emphasis> 用户解压包的时候（我们在 chroot 环境里做的），解压出来的文件会拥有生成这个包的电脑里用户和组。在安装其他包的时候这并不是问题，因为它们的源代码在安装完后就删除了。不过，Linux 内核的源代码经常会保留比较长时间。这样的话，就有可能会把软件包作者的用户 ID 对应到本机的某个用户上。从而这个用户就会拥有内核源代码的写权限。</para>

    <note>
    <para>在很多情况下，内核的配置信息需要在稍后安装来自于 BLFS 的软件包后更新。这和其他的软件包不同，在安装完成编译好的内核后不需要将内核源码树删除。</para>

    <para>如果想要保留内核的源码树，在 <filename class="directory">linux-&linux-version;</filename> 下运行 <command>chown -R 0:0</command> 来确保所有文件的所有者都 <emphasis>root</emphasis>。</para>
    </note>

    <warning>
      <para>一些内核文档里建议创建符号链接 <filename class="symlink">/usr/src/linux</filename> 指向内核源代码目录。这是 2.6 及以前版本内核的特定要求，而在 LFS 系统里<emphasis>一定不要</emphasis>创建这个链接，因为这样的话，在你的基础 LFS 系统完成后安装某些软件包时可能引起问题。</para>
    </warning>

    <warning>
      <para>系统 <filename class="directory">include</filename> 目录（<filename class="directory">/usr/include</filename>）下的头文件应该<emphasis>总是</emphasis>和编译 Glibc 时用到的头文件保持一致。就是在 <xref linkend="ch-system-linux-headers"/> 里整理过的头文件。因此，它们<emphasis>不要</emphasis>替换成原始内核头文件或任何清理过的内核头文件。</para>
    </warning>

  </sect2>

  <sect2 id="conf-modprobe" role="configuration">
    <title>配置 Linux 模块加载顺序</title>

    <indexterm zone="conf-modprobe">
      <primary sortas="e-/etc/modprobe.d/usb.conf">/etc/modprobe.d/usb.conf</primary>
    </indexterm>

    <para>虽然大多数情况下，Linux 模块会被自动加载，但是有时候需要特别指定加载顺序。<command>modprobe</command> 或 <command>insmod</command> 在加载模块时会读取 <filename>/etc/modprobe.d/usb.conf</filename>。如果将 USB 设备（ehci_hcd、ohci_hcd 和 uhci_hcd） 编译为模块，则需要此文件，这样它们就会以正确的顺序加载。ehci_hcd 需要在 ohci_hcd 和 uhci_hcd 之前加载，否则在系统启动过程中将会输出警告。</para>

    <para>运行以下命令建立 <filename>/etc/modprobe.d/usb.conf</filename> 文件：</para>

<screen><userinput>install -v -m755 -d /etc/modprobe.d
cat &gt; /etc/modprobe.d/usb.conf &lt;&lt; "EOF"
<literal># Begin /etc/modprobe.d/usb.conf

install ohci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i ohci_hcd ; true
install uhci_hcd /sbin/modprobe ehci_hcd ; /sbin/modprobe -i uhci_hcd ; true

# End /etc/modprobe.d/usb.conf</literal>
EOF</userinput></screen>

  </sect2>

  <sect2 id="contents-kernel" role="content">
    <title>Linux 的内容</title>

    <segmentedlist>
      <segtitle>安装的文件</segtitle>
      <segtitle>安装的目录</segtitle>

      <seglistitem>
        <seg>config-&linux-version;,
        <phrase revision="sysv">vmlinuz-&linux-version;-lfs-&version;,</phrase>
        <phrase revision="systemd">vmlinuz-&linux-version;-lfs-&versiond;,</phrase>
        and System.map-&linux-version;</seg>
        <seg>/lib/modules, /usr/share/doc/linux-&linux-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要说明</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="config">
        <term><filename>config-&linux-version;</filename></term>
        <listitem>
          <para>包含内核的所有配置选项</para>
          <indexterm zone="ch-bootable-kernel config">
            <primary sortas="e-/boot/config">/boot/config-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="lfskernel">
        <term revision="sysv"><filename>vmlinuz-&linux-version;-lfs-&version;</filename></term>
        <term revision="systemd"><filename>vmlinuz-&linux-version;-lfs-&versiond;</filename></term>
        <listitem>
          <para>Linux 系统的引擎。当电脑启动时，内核作为整个系统的第一部分载入。它首先检测和初始化所有的电脑硬件，然后将这些硬件模块抽象成文件树让软件访问，并把单个 CPU 转换成多任务系统，可以看上去同时地运行多个程序</para>
          <indexterm zone="ch-bootable-kernel lfskernel">
            <primary sortas="b-lfskernel">lfskernel-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="System.map">
        <term><filename>System.map-&linux-version;</filename></term>
        <listitem>
          <para>地址和符号列表；包含有入口点的映射以及所有函数和内核数据结构的地址</para>
          <indexterm zone="ch-bootable-kernel System.map">
            <primary sortas="e-/boot/System.map">/boot/System.map-&linux-version;</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
