<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-bootable-grub" role="wrap">
  <?dbhtml filename="grub.html"?>

  <sect1info condition="script">
    <productname>grub</productname>
    <productnumber>&grub-version;</productnumber>
    <address>&grub-url;</address>
  </sect1info>

  <title>使用 GRUB 设置启动过程</title>

  <sect2>
    <title>简介</title>

    <warning><para>对 GRUB 进行错误的配置可能会导致在没有外置启动设备（某些USB设备，某些 CD-ROM 等）的情况下无法正常的启动。你可能仅仅需要修改当前正在使用的引导器（比如：Grub-Legacy，GRUB2 或 LILO 等）的配置。</para></warning>

    <para>一定要确保你有一个可以引导的光盘或者是 U 盘以备不时之需，否则万一电脑真的不能启动谁都救不了你。如果你需要建立可引导的设备，可以按照以下方法操作（跳转到 BLFS 从 <ulink url="&blfs-book;multimedia/libisoburn.html">libisoburn</ulink> 软件包安装 <userinput>xorriso</userinput>）。</para>

<screen role="nodump"><userinput>cd /tmp 
grub-mkrescue --output=grub-img.iso 
xorriso -as cdrecord -v dev=/dev/cdrw blank=as_needed grub-img.iso</userinput></screen>

    <note>
      <para>想要在启用 UEFI 的宿主系统上引导 LFS，需要遵循上一节的描述在内核中构建 CONFIG_EFI_STUB 功能。也可以使用 GRUB2 来引导 LFS，这样就无需实施以上的额外操作了。但需要在宿主系统的 BIOS 中关闭 UEFI 模式和安全引导（Secure Boot）功能。详细参见文件 <ulink url="http://www.linuxfromscratch.org/hints/downloads/files/lfs-uefi.txt">lfs-uefi.txt</ulink>。</para>
    </note>

  </sect2>

  <sect2>
    <title>GRUB 命名约定</title>

    <para>GRUB 对于硬盘和分区自有一套命名规则 <emphasis>(hdn,m)</emphasis>，其中 <emphasis>n</emphasis> 是硬盘数，<emphasis>m</emphasis> 是分区号。硬盘数 N 从 0 开始计数，分区数需要区别对待——主分区从 1 开始计数而扩展分区从 5 开始计数。需要注意的是，和早期版本相比，计数方式都有所变化。例如，分区 <filename class="partition">sda1</filename> 是 <emphasis>(hd0,1)</emphasis>，<filename class="partition">sdb3</filename> 是 <emphasis>(hd1,3)</emphasis>。Linux 下，并不将 CD-ROM 设备假想为硬盘。例如，就算已有 CD 设备挂载为 <filename class="partition">hdb</filename>，第二块硬盘挂载为 <filename class="partition">hdc</filename>，GRUB 依旧将第二块硬盘称为 <emphasis>(hd1)</emphasis>。</para>

  </sect2>

  <sect2>
    <title>配置配置文件</title>

    <para>GRUB 会将一些数据写入硬盘的第一个物理扇区。这一部分不属于任何一个操作系统，在启动时，该部分数据激活，然后寻找 Grub 的模块，Grub 模块的默认位置为 /boot/grub/。</para>

    <para>一种建议是使用一个独立的小分区（建议大小 100MB）专用于引导信息。那样的话，每一个发行版，不论是 LFS 还是其他的商业发行版，都能访问相同的引导文件而且任何已经启动的系统都能访问它。如果你选择这么做，你需要挂载这个独立分区，移动所有的文件从当前的 <filename class="directory">/boot</filename> 目录（比如说你上一节刚编译的 Linux 内核）到新的分区。你然后要卸载这个新分区，重新挂载它为 <filename class="directory">/boot</filename>。如果你这么做，一定要更新 <filename>/etc/fstab</filename>。</para>

    <para>使用当前的 lfs 分区也没有什么问题，但是在配置多系统启动的时候有些不同。</para>

    <para>从以上信息可知，需要确定根分区的磁盘位置（如果使用单独的分区，则需要知道引导分区的磁盘位置），以下假定根分区（或者是磁盘分区）是 <filename class="partition">sda2</filename>。</para>

    <para>将 GRUB 文件安装到 <filename class="directory">/boot/grub</filename> 然后设置启动扇区：</para>

    <warning>
      <para>以下命令将会覆盖已有的引导器。如无需要，请勿运行（比如已经有第三方引导器管理 MBR）。</para>
    </warning>

<screen role="nodump"><userinput>grub-install /dev/sda</userinput></screen>

    <note>
      <para>如果系统是通过 UEFI 引导的，<command>grub-install</command> 将会尝试将文件安装至 <emphasis>x86_64-efi</emphasis>，但是这些文件并未在第 6 章中安装。如果是在这种情况下，在上述命令后面追加 <option>--target i386-pc</option>。</para>
    </note>

<!-- This does not seem to be true any more
    <note><para><application>grub-install</application> is a script and calls another
    program, grub-probe, that may fail with a message "cannot stat `/dev/root'".
    If so, create a temporary symbolic link from your root partition to /dev/root:</para>

<screen role="nodump"><userinput>ln -sv /dev/sda2 /dev/root</userinput></screen>

    <para>The symbolic link will only be present until the system is rebooted.
    The link is only needed for the installation procedure.
    </para></note>
-->
  </sect2>

  <sect2 id="grub-cfg">
    <title>创建 GRUB 配置文件</title>

    <para>创建 <filename>/boot/grub/grub.cfg</filename>:</para>

    <screen revision="sysv"><userinput>cat &gt; /boot/grub/grub.cfg &lt;&lt; "EOF"
<literal># Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod ext2
set root=(hd0,2)

menuentry "GNU/Linux, Linux &linux-version;-lfs-&version;" {
        linux   /boot/vmlinuz-&linux-version;-lfs-&version; root=/dev/sda2 ro
}</literal>
EOF</userinput></screen>

    <screen revision="systemd"><userinput>cat &gt; /boot/grub/grub.cfg &lt;&lt; "EOF"
<literal># Begin /boot/grub/grub.cfg
set default=0
set timeout=5

insmod ext2
set root=(hd0,2)

menuentry "GNU/Linux, Linux &linux-version;-lfs-&versiond;" {
        linux   /boot/vmlinuz-&linux-version;-lfs-&versiond; root=/dev/sda2 ro
}</literal>
EOF</userinput></screen>


    <note><para>从 <application>GRUB</application> 的角度看，内核文件相当于一个分区，所以假如你使用单独的 /boot 分区，请不要在 <emphasis>linux</emphasis> 行添加 /boot。此外还需要将 <emphasis>set root</emphasis> 行指向 /boot 所在的实际分区。</para></note>

    <para>GRUB 功能十分强大，它提供了大量的用于从种类繁多的设备和操作系统、以及不同的分区类型启动的选项。此外还可以定制启动页、播放声音或者是鼠标等。很遗憾的是，这些功能超出本文的范畴，我们一概不予讨论。</para>

    <caution><para><application>grub-mkconfig</application> 命令可以自动建立配置文件。它使用位于 /etc/grub.d/ 下的一组脚本且将会忽略用户的设置。这些命令主要用于那些非源码编译的发行版，所以不建议 LFS 用户使用此命令。如果你使用商业发行版，你可以试着运行这个命令（运行之前记得备份原来的 grub.cfg 文件）。</para></caution>

   </sect2>

</sect1>
