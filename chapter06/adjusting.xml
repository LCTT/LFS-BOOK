<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-adjusting">
  <?dbhtml filename="adjusting.html"?>

  <title>调整工具链</title>

  <para>现在最后的 C 语言库已经装好了，是时候调整工具链，让新编译的程序链接到这些新的库上。</para>

  <para>首先，备份 <filename class="directory">/tools</filename> 链接器，然后用我们在第五章调整过的链接器代替它。我们还会创建一个链接，链接到 <filename class="directory">/tools/$(uname -m)-pc-linux-gnu/bin</filename> 的副本：</para>

<screen><userinput>mv -v /tools/bin/{ld,ld-old}
mv -v /tools/$(uname -m)-pc-linux-gnu/bin/{ld,ld-old}
mv -v /tools/bin/{ld-new,ld}
ln -sv /tools/bin/ld /tools/$(uname -m)-pc-linux-gnu/bin/ld</userinput></screen>

  <para>接下来，修改 GCC 参数文件，让它指向新的动态连接器。只需删除所有「/tools」的实例，这样应该可以留下到达动态链接器的正确路径。还要调整参数文件，这样 GCC 就知道怎样找到正确的头文件和 Glibc 启动文件。一个 <command>sed</command> 命令就能完成这些：</para>

<screen><userinput>gcc -dumpspecs | sed -e 's@/tools@@g'                   \
    -e '/\*startfile_prefix_spec:/{n;s@.*@/usr/lib/ @}' \
    -e '/\*cpp:/{n;s@$@ -isystem /usr/include@}' &gt;      \
    `dirname $(gcc --print-libgcc-file-name)`/specs</userinput></screen>

  <para>直观地检查参数文件来确认预期的变化已确实完成是个好办法。</para>

  <para>确保已调整的工具链的基本功能（编译和链接）都能如期进行是非常必要的。怎样做呢？执行下面这条命令：</para>

<screen os="a"><userinput>echo 'int main(){}' &gt; dummy.c
cc dummy.c -v -Wl,--verbose &amp;&gt; dummy.log
readelf -l a.out | grep ': /lib'</userinput></screen>

  <para os="b">如果没有任何错误，上条命令的输出应该是（不同的平台上的动态链接器可能名字不同）：</para>

<screen os="c"><computeroutput>[Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]</computeroutput></screen>

  <para>注意在 64 位系统中，虽然我们的动态链接位于 <filename class="directory">/lib</filename> 中，但却可以通过 /lib64 中的符号链接访问。</para>

  <note><para>32 位系统的解释器应该是 /lib/ld-linux.so.2.</para></note>

  <para os="d">现在确保我们已经设置好了启动文件：</para>

<screen os="e"><userinput>grep -o '/usr/lib.*/crt[1in].*succeeded' dummy.log</userinput></screen>

  <para os="f">上一条命令的输出应该是：</para>

<screen><computeroutput>/usr/lib/../lib/crt1.o succeeded
/usr/lib/../lib/crti.o succeeded
/usr/lib/../lib/crtn.o succeeded</computeroutput></screen>

  <para os="g">确保链接器能找到正确的头文件：</para>

<screen><userinput>grep -B1 '^ /usr/include' dummy.log</userinput></screen>

  <para os="h">这条命令应该返回如下输出：</para>

<screen><computeroutput>#include &lt;...&gt; search starts here:
 /usr/include</computeroutput></screen>

  <para os="i">接下来，确认新的链接器已经在使用正确的搜索路径：</para>

<screen os="j"><userinput>grep 'SEARCH.*/usr/lib' dummy.log |sed 's|; |\n|g'</userinput></screen>

  <para os="k">应该忽略指向带有 '-linux-gnu' 的路径，上条命令的输出应该是：</para>

<screen><computeroutput>SEARCH_DIR("/usr/lib")
SEARCH_DIR("/lib")</computeroutput></screen>

  <para os="l">然后我们要确定我们使用的是正确的 libc：</para>

<screen os="m"><userinput>grep "/lib.*/libc.so.6 " dummy.log</userinput></screen>

  <para os="n">上条命令的输出应该为：</para>

<screen os="o"><computeroutput>attempt to open /lib/libc.so.6 succeeded</computeroutput></screen>

  <para os="p">最后，确保 GCC 使用的是正确的动态链接器：</para>

<screen os="q"><userinput>grep found dummy.log</userinput></screen>

  <para os="r">上条命令的结果应该是（不同的平台上链接器名字可以不同）：</para>

<screen os="s"><computeroutput>found ld-linux-x86-64.so.2 at /lib/ld-linux-x86-64.so.2</computeroutput></screen>

  <para os="t">如果显示的结果不一样或者根本没有显示，那就出了大问题。检查并回溯之前的步骤，找到出错的地方并改正。最有可能的原因是参数文件的调整出了问题。在进行下一步之前所有的问题都要解决。</para>

  <para os="u">确保一切正常之后，清除测试文件：</para>

<screen os="v"><userinput>rm -v dummy.c a.out dummy.log</userinput></screen>

</sect1>
