<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-bison" role="wrap">
  <?dbhtml filename="bison.html"?>

  <sect1info condition="script">
    <productname>bison</productname>
    <productnumber>&bison-version;</productnumber>
    <address>&bison-url;</address>
  </sect1info>

  <title>Bison-&bison-version;</title>

  <indexterm zone="ch-system-bison">
    <primary sortas="a-Bison">Bison</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Bison 软件包包含一个语法生成器。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&bison-ch6-sbu;</seg>
        <seg>&bison-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Bison</title>

    <para>准备编译 Bison：</para>

<screen><userinput remap="configure">./configure --prefix=/usr --docdir=/usr/share/doc/bison-&bison-version;</userinput></screen>

    <para>编译软件包：</para>

<screen><userinput remap="make">make</userinput></screen>

<!--
    <para>用以下命令测试结果（大约 2.2 SBU）：</para>

<screen><userinput remap="test">make check</userinput></screen>
-->

    <para>考虑到 bison 和 flex 的检查有循环依赖。如有需要，在下一节安装 flex 之后，可以使用 <command>make check</command> 命令重新编译并检查 bison 软件包。</para>

    <para>安装软件包：</para>

<screen><userinput remap="install">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-bison" role="content">
    <title>Bison 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>bison 和 yacc</seg>
        <seg>liby.a</seg>
        <seg>/usr/share/bison</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="bison">
        <term><command>bison</command></term>
        <listitem>
          <para>根据一系列规则生成用于分析文本结构的程序；Bison 是 Yacc（Yet Another Compiler Compiler） 的替代品。</para>
          <indexterm zone="ch-system-bison bison">
            <primary sortas="b-bison">bison</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="yacc">
        <term><command>yacc</command></term>
        <listitem>
          <para><command>bison</command> 的封装，用于仍然调用 <command>yacc</command> 而不是 <command>bison</command> 的程序；它会调用带有 <parameter>-y</parameter> 选项的 <command>bison</command></para>
          <indexterm zone="ch-system-bison yacc">
            <primary sortas="b-yacc">yacc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liby">
        <term><filename class="libraryfile">liby</filename></term>
        <listitem>
          <para>Yacc 库包含和 Yacc 兼容的 <function>yyerror</function> 和 <function>main</function> 程序的实现；这个库并不是很有用，但是 POSIX 要求有它</para>
          <indexterm zone="ch-system-bison liby">
            <primary sortas="c-liby">liby</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
