<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-gcc" role="wrap">
  <?dbhtml filename="gcc.html"?>

  <sect1info condition="script">
    <productname>gcc</productname>
    <productnumber>&gcc-version;</productnumber>
    <address>&gcc-url;</address>
  </sect1info>

  <title>GCC-&gcc-version;</title>

  <indexterm zone="ch-system-gcc">
    <primary sortas="a-GCC">GCC</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>GCC 软件包包括 GNU 编译器集，其中有 C 和 C++ 的编译器。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&gcc-ch6-sbu;</seg>
        <seg>&gcc-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 GCC</title>

    <para>如果是在 x86_64 上实施构建，更改 64 位库的默认目录名为「lib」：</para>

<screen><userinput remap="pre">case $(uname -m) in
  x86_64)
    sed -e '/m64=/s/lib64/lib/' \
        -i.orig gcc/config/i386/t-linux64
  ;;
esac</userinput></screen>

    <para>删除之前创建的符号链接，因为最终 gcc 将被安装在这：</para>

<screen><userinput remap="pre">rm -f /usr/lib/gcc</userinput></screen>

    <para>GCC 的文档建议在源代码目录之外一个专用的编译目录中编译 GCC：</para>

<screen><userinput remap="pre">mkdir -v build
cd       build</userinput></screen>

    <para>准备编译 GCC：</para>

<screen><userinput remap="configure">SED=sed                               \
../configure --prefix=/usr            \
             --enable-languages=c,c++ \
             --disable-multilib       \
             --disable-bootstrap      \
             --disable-libmpx         \
             --with-system-zlib</userinput></screen>

    <para>注意，对于其它的编程语言，现在还有一些前提条件没有准备好。可以查看 <ulink url="&blfs-book;general/gcc.html">BLFS Book</ulink> 了解如何编译 GCC 支持的所有语言的指令。</para>

    <variablelist>
      <title>新配置选项的含义：</title>

      <varlistentry>
        <term><envar>SED=sed</envar></term>
        <listitem>
          <para>设置环境变量防止访问到硬编码的 /tools/bin/sed 路径。</para>
        </listitem>
      </varlistentry>
 
      <varlistentry>
        <term><parameter>--disable-libmpx</parameter></term>
        <listitem>
          <para>这个选项告知 GCC 不要编译 mpx （Memory Protection Extensions：内存保护扩展）。此特性在一些处理器上存在问题，已经在下一个版本的 GCC 中移除。</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term><parameter>--with-system-zlib</parameter></term>
        <listitem>
          <para>这个选项告诉 GCC 链接系统安装的 Zlib 库，而不是它内部自带的库。</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>编译软件包：</para>

<screen><userinput remap="make">make</userinput></screen>

    <important>
      <para>本章节中 GCC 的测试套件至关重要，任何情况下都不能跳过。</para>
    </important>

   <para>GCC 测试套件中一个测试集的会耗尽堆栈空间，因此运行测试之前要增加栈大小：</para>

<screen><userinput remap="test">ulimit -s 32768</userinput></screen>

    <para>删除已知会导致问题的测试：</para>

<screen><userinput remap="test">rm ../gcc/testsuite/g++.dg/pr83239.C</userinput></screen>

    <para>以非特权用户测试编译结果，不要因为出现错误就停下来：</para>

<screen><userinput remap="test">chown -Rv nobody . 
su nobody -s /bin/bash -c "PATH=$PATH make -k check"</userinput></screen>

    <para>要查看测试套件结果的概要，运行：</para>

<screen><userinput remap="test">../contrib/test_summary</userinput></screen>

    <para>如果仅查看摘要，则使用管道 <userinput>grep -A7 Summ</userinput> 选项控制输出将输出：</para>

<screen><userinput remap="test">../contrib/test_summary | grep -A7 Summ</userinput></screen>

    <para>结果可以和 <ulink url="&test-results;"/> 以及 <ulink url="http://gcc.gnu.org/ml/gcc-testresults/"/> 上的相比较。</para>

    <para>一些意料之外的错误总是难以避免。GCC 开发者通常会意识到这些问题，但还没有解决。除非测试结果和上面 URL 中的相差很大，不然就可以安全继续。</para>

    <note><para>
      在某些内核配置和 AMD 处理器组合的时候，肯能会在 gcc.target/i386/mpx 测试（旨在测试最新英特尔处理器上的 MPX 选项）中出现 1100 个失败。AMD 处理器的话可以安心的忽略这些。
    </para></note>

    <para>安装软件包：</para>

<screen><userinput remap="install">make install</userinput></screen>

    <para>创建 <ulink
    url="https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch03s09.html">FHS</ulink> 因为「历史」原因而需要的软链接。</para>

<screen><userinput remap="install">ln -sv ../usr/bin/cpp /lib</userinput></screen>

    <para>很多软件包用命令 <command>cc</command> 调用 C 编译器。为了满足这些软件包，创建一个符号链接：</para>

<screen><userinput remap="install">ln -sv gcc /usr/bin/cc</userinput></screen>

    <para>增加一个兼容符号链接启用编译程序时进行链接时间优化（Link Time Optimization，LTO）：</para>

<screen><userinput remap="install">install -v -dm755 /usr/lib/bfd-plugins
ln -sfv ../../libexec/gcc/$(gcc -dumpmachine)/&gcc-version;/liblto_plugin.so \
        /usr/lib/bfd-plugins/</userinput></screen>

    <para>现在我们最终的工具链已经准备就绪了，再一次确认编译和链接都能像预期那样正常工作很重要。我们通过做和前面章节做过的相同的完整性检查做到这点：</para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='a'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='b'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='c'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='d'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='e'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='f'])"/>

<screen><computeroutput>/usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/../../../../lib/crt1.o succeeded
/usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/../../../../lib/crti.o succeeded
/usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/../../../../lib/crtn.o succeeded</computeroutput></screen>

  <para>取决于你机器的架构，上面的结果可能有稍微不同，差异通常是 <filename class="directory">/usr/lib/gcc</filename> 后目录的名称。这里重要的一点是 <command>gcc</command> 能在 <filename>/usr/lib</filename> 目录下找到所有的三个 <filename class="directory">crt*.o</filename> 文件。</para>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='g'])"/>

<screen><userinput>grep -B4 '^ /usr/include' dummy.log</userinput></screen>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='h'])"/>

<screen><computeroutput>#include &lt;...&gt; search starts here:
 /usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/include
 /usr/local/include
 /usr/lib/gcc/x86_64-pc-linux-gnu/&gcc-version;/include-fixed
 /usr/include</computeroutput></screen>

   <para>同时，注意你的目标系统三段式后面的目录名称可能和上面的不同，这取决于你的架构。</para>

<!--  This appears to be obsolete

    <note><para>在版本 4.3.0 中，GCC 无条件安装 <filename>limits.h</filename> 文件到私有 <filename class="directory">include-fixed</filename> 目录，要求这个目录已经存在。</para></note>
-->

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='i'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='j'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='k'])"/>

<screen><computeroutput>SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib64")
SEARCH_DIR("/usr/local/lib64")
SEARCH_DIR("/lib64")
SEARCH_DIR("/usr/lib64")
SEARCH_DIR("/usr/x86_64-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");</computeroutput></screen>

   <para>32 位的系统可能有一些不同的目录。例如，下面是一台 i686 机器的输出：</para>

<screen><computeroutput>SEARCH_DIR("/usr/i686-pc-linux-gnu/lib32")
SEARCH_DIR("/usr/local/lib32")
SEARCH_DIR("/lib32")
SEARCH_DIR("/usr/lib32")
SEARCH_DIR("/usr/i686-pc-linux-gnu/lib")
SEARCH_DIR("/usr/local/lib")
SEARCH_DIR("/lib")
SEARCH_DIR("/usr/lib");</computeroutput></screen>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='l'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='m'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='n'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='o'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='p'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='q'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='r'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='s'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='t'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='u'])"/>

    <xi:include xmlns:xi="http://www.w3.org/2001/XInclude"
    href="adjusting.xml"
    xpointer="xpointer(//*[@os='v'])"/>

    <para>最后，移动位置放错的文件：</para>

<screen><userinput remap="install">mkdir -pv /usr/share/gdb/auto-load/usr/lib
mv -v /usr/lib/*gdb.py /usr/share/gdb/auto-load/usr/lib</userinput></screen>

  </sect2>

  <sect2 id="contents-gcc" role="content">
    <title>GCC 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装的库</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>c++, cc (链接到 gcc), cpp, g++, gcc,
        gcc-ar, gcc-nm, gcc-ranlib, 和 gcov</seg>

        <seg>libasan.{a,so}, libatomic.{a,so}, libgcc.a, libgcc_eh.a, 
        libgcc_s.so, libgcov.a, libgomp.{a,so}, libiberty.a, libitm.{a,so},
        liblto_plugin.so, 
        libquadmath.{a,so}, libssp.{a,so},
        libssp_nonshared.a, libstdc++.{a,so}, libsupc++.a, 和 libtsan.{a,so}</seg>

        <seg>/usr/include/c++, /usr/lib/gcc, /usr/libexec/gcc, 和 
        /usr/share/gcc-&gcc-version;</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="c">
        <term><command>c++</command></term>
        <listitem>
          <para>C++ 编译器</para>
          <indexterm zone="ch-system-gcc c">
            <primary sortas="b-c++">c++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cc">
        <term><command>cc</command></term>
        <listitem>
          <para>C 编译器</para>
          <indexterm zone="ch-system-gcc cc">
            <primary sortas="b-cc">cc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="cpp">
        <term><command>cpp</command></term>
        <listitem>
          <para>C 预处理器；编译器用来扩展源文件中 #include、#define 以及类似语句</para>
          <indexterm zone="ch-system-gcc cpp">
            <primary sortas="b-cpp">cpp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="g">
        <term><command>g++</command></term>
        <listitem>
          <para>C++ 编译器</para>
          <indexterm zone="ch-system-gcc g">
            <primary sortas="b-g++">g++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc">
        <term><command>gcc</command></term>
        <listitem>
          <para>C 编译器</para>
          <indexterm zone="ch-system-gcc gcc">
            <primary sortas="b-gcc">gcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-ar">
        <term><command>gcc-ar</command></term>
        <listitem>
          <para>增加插件到命令行的 <command>ar</command> 的封装。这个程序只用于添加 "链接时间优化"，在使用默认编译选项时不起作用</para>
          <indexterm zone="ch-system-gcc gcc-ar">
            <primary sortas="b-gcc-ar">gc-ar</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-nm">
        <term><command>gcc-nm</command></term>
        <listitem>
          <para>增加插件到命令行的 <command>nm</command> 的封装。这个程序只用于添加 "链接时间优化"，在使用默认编译选项时不起作用</para>
          <indexterm zone="ch-system-gcc gcc-nm">
            <primary sortas="b-gcc-nm">gc-nm</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcc-ranlib">
        <term><command>gcc-ranlib</command></term>
        <listitem>
          <para>增加插件到命令行的 <command>ranlib</command> 的封装。这个程序只用于添加 "链接时间优化"，在使用默认编译选项时不起作用</para>
          <indexterm zone="ch-system-gcc gcc-ranlib">
            <primary sortas="b-gcc-ranlib">gc-ranlib</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="gcov">
        <term><command>gcov</command></term>
        <listitem>
          <para>一个覆盖测试工具；用于分析程序以决定在哪里进行优化有最大的效果</para>
          <indexterm zone="ch-system-gcc gcov">
            <primary sortas="b-gcov">gcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libasan">
        <term><command>libasan</command></term>
        <listitem>
          <para>Address Sanitizer（地址消毒剂）运行时库。</para>
          <indexterm zone="ch-system-gcc libasan">
            <primary sortas="b-libasan">libasan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcc">
        <term><filename class="libraryfile">libgcc</filename></term>
        <listitem>
          <para>包含用于 <command>gcc</command> 的运行时支持</para>
          <indexterm zone="ch-system-gcc libgcc">
            <primary sortas="c-libgcc">libgcc</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgcov">
        <term><filename class="libraryfile">libgcov</filename></term>
        <listitem>
          <para>当指示 GCC 启用分析时该库会被链接到程序中</para>
          <indexterm zone="ch-system-gcc libgcov">
            <primary sortas="c-libgcov">libgcov</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libgomp">
        <term><filename class="libraryfile">libgomp</filename></term>
        <listitem>
          <para>用于 C/C++、Fortran 语言的多平台共享内存并行编程的 OpenMP API 的 GNU 实现</para>
          <indexterm zone="ch-system-gcc libgomp">
            <primary sortas="c-libgomp">libgomp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libiberty">
        <term><filename class="libraryfile">libiberty</filename></term>
        <listitem>
          <para>包含多种 GNU 程序所使用的例程，包括 <command>getopt</command>, <command>obstack</command>, <command>strerror</command>, <command>strtol</command>, 和 <command>strtoul</command></para>
          <indexterm zone="ch-system-gcc libiberty">
            <primary sortas="c-libiberty">libiberty</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="liblto_plugin">
        <term><filename class="libraryfile">liblto_plugin</filename></term>
        <listitem>
          <para>GCC 的链接时间优化（LTO）插件，允许 GCC 跨编译单元进行优化</para>
          <indexterm zone="ch-system-gcc liblto_plugin">
            <primary sortas="c-liblto_plugin">liblto_plugin</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libquadmath">
        <term><filename class="libraryfile">libquadmath</filename></term>
        <listitem>
          <para>GCC 四精度数学库 API</para>
          <indexterm zone="ch-system-gcc libquadmath">
            <primary sortas="c-libquadmath">libquadmath</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libssp">
        <term><filename class="libraryfile">libssp</filename></term>
        <listitem>
          <para>包含支持 GCC 堆栈溢出保护功能的例程</para>
          <indexterm zone="ch-system-gcc libssp">
            <primary sortas="c-libssp">libssp</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libstdc">
        <term><filename class="libraryfile">libstdc++</filename></term>
        <listitem>
          <para>标准 C++ 库</para>
          <indexterm zone="ch-system-gcc libstdc">
            <primary sortas="c-libstdc++">libstdc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libsupc">
        <term><filename class="libraryfile">libsupc++</filename></term>
        <listitem>
          <para>为 C++ 编程语言提供支持例程</para>
          <indexterm zone="ch-system-gcc libsupc">
            <primary sortas="c-libsupc++">libsupc++</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="libtsan">
        <term><filename class="libraryfile">libtsan</filename></term>
        <listitem>
          <para>Thread Sanitizer（数据速率检测工具） 运行时库</para>
          <indexterm zone="ch-system-gcc libtsan">
            <primary sortas="c-libtsan">libtsan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
