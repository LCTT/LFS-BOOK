<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-createfiles">
  <?dbhtml filename="createfiles.html"?>

  <title>创建必要的文件和符号链接</title>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/etc/passwd">/etc/passwd</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/etc/group">/etc/group</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/run/utmp">/var/run/utmp</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/log/btmp">/var/log/btmp</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/log/lastlog">/var/log/lastlog</primary>
  </indexterm>

  <indexterm zone="ch-system-createfiles">
    <primary sortas="e-/var/log/wtmp">/var/log/wtmp</primary>
  </indexterm>

  <para>有些程序里会使用写死的路径调用其它暂时还未安装的程序。为了满足这种类型程序的需要，我们将创建一些符号链接，在完成本章内容后这些软件会安装好，并替代之前的符号链接：</para>

<screen><userinput>ln -sv /tools/bin/{bash,cat,chmod,dd,echo,ln,mkdir,pwd,rm,stty,touch} /bin
ln -sv /tools/bin/{env,install,perl,printf}         /usr/bin
ln -sv /tools/lib/libgcc_s.so{,.1}                  /usr/lib
ln -sv /tools/lib/libstdc++.{a,so{,.6}}             /usr/lib

install -vdm755 /usr/lib/pkgconfig

ln -sv bash /bin/sh</userinput></screen>

<!--for lib in blkid lzma mount uuid
do
    ln -sv /tools/lib/lib$lib.so* /usr/lib
done-->
<!--ln -svf /tools/include/blkid    /usr/include
ln -svf /tools/include/libmount /usr/include
ln -svf /tools/include/uuid     /usr/include-->
<!--for pc in blkid mount uuid
do
    sed 's@tools@usr@g' /tools/lib/pkgconfig/${pc}.pc \
        > /usr/lib/pkgconfig/${pc}.pc
done-->
  <variablelist>
    <title>每个链接的目的：</title>

    <varlistentry>
      <term><parameter><filename>/bin/bash</filename></parameter></term>
      <listitem>
        <para>许多 <command>bash</command> 脚本指定了 <filename>/bin/bash</filename>。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/cat</filename></parameter></term>
      <listitem>
        <para>这个路径在 Glibc 的配置脚本里写死了。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/dd</filename></parameter></term>
      <listitem>
        <para>到 <filename>dd</filename> 的路径将写死在<filename>/usr/bin/libtool</filename> 实用工具中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/echo</filename></parameter></term>
      <listitem>
        <para>这个是为了满足 Glibc 测试套件里的一个测试用例，它会检测 <filename>/bin/echo</filename>。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/bin/env</filename></parameter></term>
      <listitem>
        <para>这个路径名硬编码到许多软件包的构建过程中。
        <!-- systemd  This may not be needed if we move sysd to the end--></para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/bin/install</filename></parameter></term>
      <listitem>
        <para>到 <filename>install</filename> 的路径将写死在 <filename>/usr/lib/bash/Makefile.inc</filename> 文件中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/ln</filename></parameter></term>
      <listitem>
        <para>到 <filename>ln</filename> 的路径将写死在 <filename>/usr/lib/perl5/&perl-version;/&lt;target-triplet&gt;/Config_heavy.pl</filename> 文件中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/pwd</filename></parameter></term>
      <listitem>
        <para>某些 <command>configure</command> 脚本，特别是 Glibc 的，写死了这个路径。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/rm</filename></parameter></term>
      <listitem>
        <para>到 <filename>rm</filename> 的路径将写死在 <filename>/usr/lib/perl5/&perl-version;/&lt;target-triplet&gt;/Config_heavy.pl</filename> 文件中。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/bin/stty</filename></parameter></term>
      <listitem>
        <para>这个路径在 Expect 软件中写死了，所以在 Binutils 和 GCC 测试套件中会需要它。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/bin/perl</filename></parameter></term>
      <listitem>
        <para>许多 Perl 脚本写死了这个路径调用 <command>perl</command> 执行程序。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/lib/libgcc_s.so{,.1}</filename></parameter></term>
      <listitem>
        <para>Glibc 需要这个让 pthreads 库正常工作。</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter><filename>/usr/lib/libstdc++{,.6}</filename></parameter></term>
      <listitem>
        <para>在 Glibc 的一些测试套件和对于 GMP 的 C++ 支持中会需要。</para>
      </listitem>
    </varlistentry>
<!--
    <varlistentry>
      <term><parameter><filename>/usr/lib/libstdc++.la</filename></parameter></term>
      <listitem>
        <para>This prevents a <filename class="directory">/tools</filename>
        reference that would otherwise be in
        <filename>/usr/lib/libstdc++.la</filename> after GCC is installed.</para>
      </listitem>
    </varlistentry>
-->
    <!--<varlistentry revision="systemd">-->
<!--    <varlistentry>
      <term><parameter><filename>/usr/lib/lib{blkid,lzma,mount,uuid}.{a,la,so*}</filename></parameter></term>
      <listitem>
        <para>这些链接可以防止实用程序获取 <filename class="directory">/tools</filename> 目录中不必要的引用。</para>
      </listitem>
    </varlistentry>-->

    <varlistentry>
      <term><parameter><filename>/bin/sh</filename></parameter></term>
      <listitem>
        <para>许多 shell 脚本写死了位置 <filename>/bin/sh</filename>。</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <para>由于历史原因，Linux 在文件 <filename>/etc/mtab</filename> 中维护一个已挂载文件系统的列表。而现代内核改为在内部维护这个列表，并通过 <filename
  class="directory">/proc</filename> 文件系统输出给用户。为了满足一些依赖 <filename>/etc/mtab</filename> 文件的应用程序，我们要创建下面的符号链接：</para>

<screen><userinput>ln -sv /proc/self/mounts /etc/mtab</userinput></screen>

  <para>为了让 <systemitem class="username">root</systemitem> 用户能正常登录，而且「root」的名字能被正常识别，必须在文件 <filename>/etc/passwd</filename> 和 <filename>/etc/group</filename>  中写入相应的内容。</para>

  <para>运行下面的命令创建 <filename>/etc/passwd</filename> 文件：</para>

<screen revision="sysv"><userinput>cat &gt; /etc/passwd &lt;&lt; "EOF"
<literal>root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false</literal>
EOF</userinput></screen>

<screen revision="systemd"><userinput>cat &gt; /etc/passwd &lt;&lt; "EOF"
<literal>root:x:0:0:root:/root:/bin/bash
bin:x:1:1:bin:/dev/null:/bin/false
daemon:x:6:6:Daemon User:/dev/null:/bin/false
messagebus:x:18:18:D-Bus Message Daemon User:/var/run/dbus:/bin/false
systemd-bus-proxy:x:72:72:systemd Bus Proxy:/:/bin/false
systemd-journal-gateway:x:73:73:systemd Journal Gateway:/:/bin/false
systemd-journal-remote:x:74:74:systemd Journal Remote:/:/bin/false
systemd-journal-upload:x:75:75:systemd Journal Upload:/:/bin/false
systemd-network:x:76:76:systemd Network Management:/:/bin/false
systemd-resolve:x:77:77:systemd Resolver:/:/bin/false
systemd-timesync:x:78:78:systemd Time Synchronization:/:/bin/false
systemd-coredump:x:79:79:systemd Core Dumper:/:/bin/false
nobody:x:99:99:Unprivileged User:/dev/null:/bin/false</literal>
EOF</userinput></screen>

  <para><systemitem class="username">root</systemitem>  用户的实际密码（这里的「x」只是占位符）将在后面创建。</para>

  <para>运行下面的命令创建 <filename>/etc/group</filename> 文件：</para>

<screen revision="sysv"><userinput>cat &gt; /etc/group &lt;&lt; "EOF"
<literal>root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
input:x:24:
mail:x:34:
kvm:x:61:
wheel:x:97:
nogroup:x:99:
users:x:999:</literal>
EOF</userinput></screen>

<screen revision="systemd"><userinput>cat &gt; /etc/group &lt;&lt; "EOF"
<literal>root:x:0:
bin:x:1:daemon
sys:x:2:
kmem:x:3:
tape:x:4:
tty:x:5:
daemon:x:6:
floppy:x:7:
disk:x:8:
lp:x:9:
dialout:x:10:
audio:x:11:
video:x:12:
utmp:x:13:
usb:x:14:
cdrom:x:15:
adm:x:16:
messagebus:x:18:
systemd-journal:x:23:
input:x:24:
mail:x:34:
kvm:x:61:
systemd-bus-proxy:x:72:
systemd-journal-gateway:x:73:
systemd-journal-remote:x:74:
systemd-journal-upload:x:75:
systemd-network:x:76:
systemd-resolve:x:77:
systemd-timesync:x:78:
systemd-coredump:x:79:
wheel:x:97:
nogroup:x:99:
users:x:999:</literal>
EOF</userinput></screen>

  <para>这里创建的用户组没有参照任何标准——它们一部分是为了满足本章中配置 udev 的需要，还有一部分来自一些现存 Linux 发行版的通用设定。另外，某些测试套件也依赖特定用户或组。而 Linux 标准规范 （LSB，参见 <ulink url="http://www.linuxbase.org"/>）只要求以组 ID（GID）为 0 创建用户组 
  <systemitem class="groupname">root</systemitem> 以及以 GID 为 1 创建用户组 <systemitem class="groupname">bin</systemitem>。系统管理员可以自由分配其它所有用户组名字和 GID，因为优秀的程序不会依赖 GID 数字，而是使用组名。</para>

  <para>为了移除「I have no name!」的提示符，可以打开一个新 shell。由于完整的 Glibc 已经在 <xref linkend="chapter-temporary-tools"/> 里装好了，而且已经创建好了 <filename>/etc/passwd</filename> 和 <filename>/etc/group</filename> 文件，用户名和组名就可以正常解析了：</para>

<screen role="nodump"><userinput>exec /tools/bin/bash --login +h</userinput></screen>

  <para>注意这里使用了 <parameter>+h</parameter> 参数。这样会告诉 <command>bash</command> 不要使用它内建的路径哈希功能。而不加这个参数的话，<command>bash</command> 将会记住曾经执行过程序的路径。为了在新编译安装好程序后就能马上使用，参数 <parameter>+h</parameter> 将在本章中一直使用。</para>

  <para>程序 <command>login</command>、<command>agetty</command> 和 <command>init</command>（还有一些其它的）会使用一些日志文件来记录信息，比如谁在什么时候登录了系统。不过，在日志文件不存在的时候这些程序一般不会写入。下面初始化一下日志文件并加上合适的权限：</para>

<screen><userinput>touch /var/log/{btmp,lastlog,faillog,wtmp}
chgrp -v utmp /var/log/lastlog
chmod -v 664  /var/log/lastlog
chmod -v 600  /var/log/btmp</userinput></screen>

  <para>文件 <filename>/var/log/wtmp</filename> 会记录所有的登录和登出动作。文件 <filename>/var/log/lastlog</filename> 会记录每个用户的最后一次登录时间。文件 <filename>/var/log/faillog</filename> 会记录失败的登录尝试。文件 <filename>/var/log/btmp</filename> 会记录非法的登录尝试。</para>

  <note><para>文件 <filename>/run/utmp</filename> 会记录当前已登录的用户。这个文件会在启动脚本中动态创建。</para></note>

</sect1>
