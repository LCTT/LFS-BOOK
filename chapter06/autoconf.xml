<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-system-autoconf" role="wrap">
  <?dbhtml filename="autoconf.html"?>

  <sect1info condition="script">
    <productname>autoconf</productname>
    <productnumber>&autoconf-version;</productnumber>
    <address>&autoconf-url;</address>
  </sect1info>

  <title>Autoconf-&autoconf-version;</title>

  <indexterm zone="ch-system-autoconf">
    <primary sortas="a-Autoconf">Autoconf</primary>
  </indexterm>

  <sect2 role="package">
    <title/>

    <para>Autoconf 软件包包含用于生成自动配置源代码的 shell 脚本的程序。</para>

    <segmentedlist>
      <segtitle>&buildtime;</segtitle>
      <segtitle>&diskspace;</segtitle>

      <seglistitem>
        <seg>&autoconf-ch6-sbu;</seg>
        <seg>&autoconf-ch6-du;</seg>
      </seglistitem>
    </segmentedlist>

  </sect2>

  <sect2 role="installation">
    <title>安装 Autoconf</title>

    <para>准备编译 Autoconf：</para>

    <para>首先，修复一个 Perl 5.28 引入的问题。</para>

<screen><userinput remap="pre">sed '361 s/{/\\{/' -i bin/autoscan.in</userinput></screen>

    <para>准备编译 Autoconf：</para>

<screen><userinput remap="configure">./configure --prefix=/usr</userinput></screen>

    <para>编译软件包：</para>

<screen><userinput remap="make">make</userinput></screen>
<!--
    <para>To test the results, issue:</para>-->
    <para>由于 bash-5 和 libtool-2.4.3 的原因，测试套件当前无法使用。如果要强行测试，输入：</para>

<screen><userinput remap="test">make check</userinput></screen>
<!--
    <para>这需要很长一段时间，大概 &autoconf-ch6-sbu-tests; SBUs。另外，跳过了需要 Automake 的若干测试。为了全面测试，Automake 安装完成后可以重新测试 Autoconf。另外，由于 libtool-2.4.3 及之后版本的变化，两个测试将会失败。</para>

    <note><para>在多内核的系统上，可以效果显著的削减 autoconf 的测试时间。将 <command>TESTSUITEFLAGS=-j&lt;N&gt;</command> 追加到上面的命令中，以达到该效果。。例如，使用 -j4 可以节约超过 60% 的测试时间。</para></note>
-->
    <para>安装软件包：</para>

<screen><userinput remap="install">make install</userinput></screen>

  </sect2>

  <sect2 id="contents-autoconf" role="content">
    <title>Autoconf 软件包内容</title>

    <segmentedlist>
      <segtitle>安装的程序</segtitle>
      <segtitle>安装目录</segtitle>

      <seglistitem>
        <seg>autoconf, autoheader, autom4te, autoreconf, autoscan, autoupdate, 和 ifnames</seg>
        <seg>/usr/share/autoconf</seg>
      </seglistitem>
    </segmentedlist>

    <variablelist>
      <bridgehead renderas="sect3">简要介绍</bridgehead>
      <?dbfo list-presentation="list"?>
      <?dbhtml list-presentation="table"?>

      <varlistentry id="autoconf">
        <term><command>autoconf</command></term>
        <listitem>
          <para>生成能为多种类 Unix 系统自动配置软件源码包的 shell 脚本；它生成的配置脚本是独立的——运行脚本不需要 <command>autoconf</command> 程序</para>
          <indexterm zone="ch-system-autoconf autoconf">
            <primary sortas="b-autoconf">autoconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoheader">
        <term><command>autoheader</command> </term>
        <listitem>
          <para>一个能生成给配置脚本使用的 C <emphasis>#define</emphasis> 语句模板文件的工具</para>
          <indexterm zone="ch-system-autoconf autoheader">
            <primary sortas="b-autoheader">autoheader</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autom4te">
        <term><command>autom4te</command></term>
        <listitem>
          <para>M4 宏处理器的封装</para>
          <indexterm zone="ch-system-autoconf autom4te">
            <primary sortas="b-autom4te">autom4te</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoreconf">
        <term><command>autoreconf</command></term>
        <listitem>
          <para>对 <command>autoconf</command> 和
<command>automake</command> 模板文件作了更改后能以正确顺序自动运行 <command>autoconf</command>，<command>autoheader</command>，<command>aclocal</command>，<command>automake</command>，<command>gettextize</command>，以及 <command>libtoolize</command> 以节省时间</para>
          <indexterm zone="ch-system-autoconf autoreconf">
            <primary sortas="b-autoreconf">autoreconf</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoscan">
        <term><command>autoscan</command> </term>
        <listitem>
          <para>为软件包帮助生成 <filename>configure.in</filename> 文件；它检查目录树中的源文件，查找常见移植问题，生成作为软件包的初步 <filename>configure.scan</filename> 文件的 <filename>configure.in</filename> 文件</para>
          <indexterm zone="ch-system-autoconf autoscan">
            <primary sortas="b-autoscan">autoscan</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="autoupdate">
        <term><command>autoupdate</command></term>
        <listitem>
          <para>更改 <filename>configure.in</filename> 文件，仍然通过旧名称调用 <command>autoconf</command> 宏来使用当前宏名称</para>
          <indexterm zone="ch-system-autoconf autoupdate">
            <primary sortas="b-autoupdate">autoupdate</primary>
          </indexterm>
        </listitem>
      </varlistentry>

      <varlistentry id="ifnames">
        <term><command>ifnames</command> </term>
        <listitem>
          <para>帮助为软件包写 <filename>configure.in</filename> 文件；打印软件包在 C 预处理器中使用的标识符[如果已经设置软件包具有某些可移植性，该程序能帮助决定需要检查哪些  <command>configure</command>。还能填充 <filename>configure.in</filename> 生成的 <command>autoscan</command> 文件中的空格。]</para>
          <indexterm zone="ch-system-autoconf ifnames">
            <primary sortas="b-ifnames">ifnames</primary>
          </indexterm>
        </listitem>
      </varlistentry>

    </variablelist>

  </sect2>

</sect1>
